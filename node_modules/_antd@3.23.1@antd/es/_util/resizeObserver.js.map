{"version":3,"sources":["_util/resizeObserver.jsx"],"names":["React","findDOMNode","ResizeObserver","ReactResizeObserver","arguments","resizeObserver","state","width","height","onResize","entries","props","target","getBoundingClientRect","fixedWidth","Math","floor","fixedHeight","setState","onComponentUpdated","destroyObserver","disabled","element","observe","disconnect","children","Component"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,cAAP,MAA2B,0BAA3B;;IACMC,mB;;;;;AACF,iCAAc;AAAA;;AAAA;;AACV,8FAASC,SAAT;AACA,UAAKC,cAAL,GAAsB,IAAtB;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,CADE;AAETC,MAAAA,MAAM,EAAE;AAFC,KAAb;;AAIA,UAAKC,QAAL,GAAgB,UAACC,OAAD,EAAa;AAAA,UACjBD,QADiB,GACJ,MAAKE,KADD,CACjBF,QADiB;AAAA,UAEjBG,MAFiB,GAENF,OAAO,CAAC,CAAD,CAFD,CAEjBE,MAFiB;;AAAA,kCAGCA,MAAM,CAACC,qBAAP,EAHD;AAAA,UAGjBN,KAHiB,yBAGjBA,KAHiB;AAAA,UAGVC,MAHU,yBAGVA,MAHU;AAIzB;;;;;;;AAKA,UAAMM,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWT,KAAX,CAAnB;AACA,UAAMU,WAAW,GAAGF,IAAI,CAACC,KAAL,CAAWR,MAAX,CAApB;;AACA,UAAI,MAAKF,KAAL,CAAWC,KAAX,KAAqBO,UAArB,IAAmC,MAAKR,KAAL,CAAWE,MAAX,KAAsBS,WAA7D,EAA0E;AACtE,cAAKC,QAAL,CAAc;AACVX,UAAAA,KAAK,EAAEO,UADG;AAEVN,UAAAA,MAAM,EAAES;AAFE,SAAd;;AAIA,YAAIR,QAAJ,EAAc;AACVA,UAAAA,QAAQ;AACX;AACJ;AACJ,KApBD;;AAPU;AA4Bb;;;;wCACmB;AAChB,WAAKU,kBAAL;AACH;;;yCACoB;AACjB,WAAKA,kBAAL;AACH;;;2CACsB;AACnB,WAAKC,eAAL;AACH;;;yCACoB;AAAA,UACTC,QADS,GACI,KAAKV,KADT,CACTU,QADS;AAEjB,UAAMC,OAAO,GAAGrB,WAAW,CAAC,IAAD,CAA3B;;AACA,UAAI,CAAC,KAAKI,cAAN,IAAwB,CAACgB,QAAzB,IAAqCC,OAAzC,EAAkD;AAC9C;AACA,aAAKjB,cAAL,GAAsB,IAAIH,cAAJ,CAAmB,KAAKO,QAAxB,CAAtB;AACA,aAAKJ,cAAL,CAAoBkB,OAApB,CAA4BD,OAA5B;AACH,OAJD,MAKK,IAAID,QAAJ,EAAc;AACf;AACA,aAAKD,eAAL;AACH;AACJ;;;sCACiB;AACd,UAAI,KAAKf,cAAT,EAAyB;AACrB,aAAKA,cAAL,CAAoBmB,UAApB;AACA,aAAKnB,cAAL,GAAsB,IAAtB;AACH;AACJ;;;6BACQ;AAAA,iCACuB,KAAKM,KAD5B,CACGc,QADH;AAAA,UACGA,QADH,qCACc,IADd;AAEL,aAAOA,QAAP;AACH;;;;EA7D6BzB,KAAK,CAAC0B,S;;AA+DxC,eAAevB,mBAAf","sourcesContent":["import * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport ResizeObserver from 'resize-observer-polyfill';\nclass ReactResizeObserver extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.resizeObserver = null;\n        this.state = {\n            width: 0,\n            height: 0,\n        };\n        this.onResize = (entries) => {\n            const { onResize } = this.props;\n            const { target } = entries[0];\n            const { width, height } = target.getBoundingClientRect();\n            /**\n             * Resize observer trigger when content size changed.\n             * In most case we just care about element size,\n             * let's use `boundary` instead of `contentRect` here to avoid shaking.\n             */\n            const fixedWidth = Math.floor(width);\n            const fixedHeight = Math.floor(height);\n            if (this.state.width !== fixedWidth || this.state.height !== fixedHeight) {\n                this.setState({\n                    width: fixedWidth,\n                    height: fixedHeight,\n                });\n                if (onResize) {\n                    onResize();\n                }\n            }\n        };\n    }\n    componentDidMount() {\n        this.onComponentUpdated();\n    }\n    componentDidUpdate() {\n        this.onComponentUpdated();\n    }\n    componentWillUnmount() {\n        this.destroyObserver();\n    }\n    onComponentUpdated() {\n        const { disabled } = this.props;\n        const element = findDOMNode(this);\n        if (!this.resizeObserver && !disabled && element) {\n            // Add resize observer\n            this.resizeObserver = new ResizeObserver(this.onResize);\n            this.resizeObserver.observe(element);\n        }\n        else if (disabled) {\n            // Remove resize observer\n            this.destroyObserver();\n        }\n    }\n    destroyObserver() {\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n            this.resizeObserver = null;\n        }\n    }\n    render() {\n        const { children = null } = this.props;\n        return children;\n    }\n}\nexport default ReactResizeObserver;\n"],"file":"resizeObserver.js"}